======================================
PeekPoke Protocol v2.txt
29 April 2018
Chris Siedell
http://siedell.com/projects/PeekPoke/
======================================

PeekPoke is a tool for reading and writing the hub RAM of a Parallax Propeller 
P8X32A microcontroller from a computer. PeekPoke also has additional features:
    - getting the PAR register of the launched instance,
    - getting and setting the serial timings,
    - resetting the serial timings with a break condition,
    - getting and setting a cog-based token for session management, and
    - executing arbitrary code sent by the PC.

Some of these features may be disabled.

PeekPoke is designed to use the Crow serial transport layer, which facilitates
simple command and response protocols.

The suggested port number is 112 (ascii 'p').

The protocol identifier is "PeekPoke".


Break Detection
===============

In the default implementation the serial timings will be reset to the last
known good values when a break condition is detected. The last known good
values are saved every time a valid command is received, even if the command
is addressed to a different device or is too large for the device.

Break detection can be disabled.


Payload Format
==============

All commands have a four byte initial header: 0x70, 0x70, 0x00, and
commandCode. Responses repeat the same initial four byte header. Any
additional payload data depends on the command.

Errors are reported using Crow-level error responses.

All multibyte values are in little-endian order.

These are the command codes:
    0 - getInfo
    1 - readHub
    2 - writeHub
    3 - readHubStr
    4 - getSerialTimings
    5 - setSerialTimings
    6 - getToken
    7 - setToken
    8 - payloadExec
    9-14 - reserved
    15 - reserved for indicating break detection support (see getInfo)


getInfo
=======

Command payload, 4 bytes:
        pos     len     description
        0       4       initial header

Response payload, 24 bytes:
        pos     len     description
        0       4       initial header
        4       2       max single command read size
        6       2       max single command write size
        8       2       min allowed read address
        10      2       max allowed read address
        12      2       min allowed write address
        14      2       max allowed write address
        16      4       implementation's layoutID (for payloadExec)
        20      2       par
        22      2       available commands

The available commands bitfield has bits set corresponding to the command
codes. For example, if bit 2 is set then writeHub is available. Bits 9 to 14
must always be set to 0 by devices implementing this version of PeekPoke. Bit
15 indicates whether the device has break detection enabled.


readHub
=======

Command payload, 8 bytes:
        pos     len     description
        0       4       initial header
        4       2       address of read start, any alignment
        6       2       count = number of bytes to read, may be zero

Response payload, 4+count bytes:
        pos     len     description
        0       4       initial header
        4+      count   the bytes read


writeHub
========

Command payload, 8 bytes:
        pos     len     description
        0       4       initial header
        4       2       address of write start, any alignment
        6       2       count = number of bytes to write, may be zero
        8+      count   the bytes to write

Response payload, 4 bytes:
        pos     len     description
        0       4       initial header

A single write command can be considered atomic since the data is included in
a packet that is fully received into a buffer and checked for errors before
performing the command.


readHubStr
==========

Command payload, 8 bytes:
        pos     len     description
        0       4       initial header
        4       2       address of read start, any alignment
        6       2       max count M, including terminating NUL, may be zero

Response payload, 4 to 4+count bytes:
        pos     len     description
        0       4       initial header
        4+      <= M    the string, including terminating NUL (if found)

readHubStr is like readHub, except it stops after the first 0x00 is found.


getSerialTimings
================

Command payload, 4 bytes:
        pos     len     description
        0       4       initial header

Response payload, 32 bytes:
        pos     len     description
        0       4       initial header
        4       4       bitPeriod0
        8       4       bitPeriod1
        12      4       startBitWait
        16      4       stopBitDuration
        20      4       interbyteTimeout
        24      4       recoveryTime
        28      4       breakMultiple

All timings are in system clocks except breakMultiple, which is the number of
recoveryTime intervals that the rx line must be continuously low before a break
condition is detected.


setSerialTimings
================

Command payload, 32 bytes:
        pos     len     description
        0       4       initial header
        4       4       bitPeriod0
        8       4       bitPeriod1
        12      4       startBitWait
        16      4       stopBitDuration
        20      4       interbyteTimeout
        24      4       recoveryTime
        28      4       breakMultiple

Response payload, 4 bytes:
        pos     len     description
        0       4       initial header

Changes take effect after the acknowledgement response is sent.


getToken
========

Command payload, 4 bytes:
        pos     len     description
        0       4       initial header

Response payload, 8 bytes:
        pos     len     description
        0       4       initial header
        4       4       token

token is a 4-byte value that is all zeroes on launch. It does not change
except when setToken is called.


setToken
========

Command payload, 8 bytes:
        pos     len     description
        0       4       initial header
        4       4       new token

Response payload, 8 bytes:
        pos     len     description
        0       4       initial header
        4       4       old token


payloadExec
===========

Command payload, 12+ bytes:
        pos     len     description
        0       4       initial header
        4       4       layoutID
        8+      4+      PASM code

Response payload, 4+ bytes (if sent):
        pos     len     description
        0       4       initial header
        4+      -       data

The payloadExec option requires a pre-arranged cog layout in order to work.
The layoutID argument identifies what layout the payload code expects. Only if
the payload's expected layout matches the implementation's will the payload
code be executed.

Execution starts at the beginning of the PASM code.

If a response is returned it must begin with the standard initial header.

