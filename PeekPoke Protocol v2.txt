======================================
PeekPoke Protocol v2.txt
30 April 2018
Chris Siedell
http://siedell.com/projects/PeekPoke/
======================================

PeekPoke is a tool for reading and writing the hub RAM of a Parallax Propeller 
P8X32A microcontroller from a computer. PeekPoke also has additional features:
    - supporting string reads (stops after first NUL),
    - limiting reads and writes to allowed ranges,
    - getting the PAR register of the launched instance,
    - getting and setting the serial timings,
    - resetting the serial timings with a break condition,
    - getting a cog-based identifier (set by user),
    - getting and setting a cog-based token (for session management), and
    - executing arbitrary code sent by the PC.

Some of these features may be disabled.

PeekPoke is designed to use the Crow serial transport layer, which facilitates
simple command and response protocols.

The suggested port number is 112 (ascii 'p').

The protocol identifier is "PeekPoke".


Break Detection
===============

Break detection, if enabled, is used to instruct the implementation to reset
its serial timings to the last known good values. The last known good values
are saved every time a PeekPoke command is received -- CrowAdmin commands like
ping will not cause the timings to be saved.


Payload Format
==============

All commands have a four byte initial header: 0x70, 0x70, 0x00, and
commandCode. Responses repeat the same initial four byte header. Any
additional payload data depends on the command.

Errors are reported using Crow-level error responses.

All multibyte values are in little-endian order.

These are the command codes:
    0 - getInfo
    1 - readHub
    2 - writeHub
    3 - readHubStr
    4 - getSerialTimings
    5 - setSerialTimings
    6 - getToken
    7 - setToken
    8 - payloadExec
    9-14 - reserved
    15 - reserved for indicating break detection support (see getInfo)
    16-255 - reserved


getInfo
=======

Command payload, 4 bytes:
        pos     len     description
        0       4       initial header

Response payload, 30+ bytes:
        pos     len     description
        0       4       initial header
        4       2       max single command read size
        6       2       max single command write size
        8       2       min allowed read address
        10      2       max allowed read address
        12      2       min allowed write address
        14      2       max allowed write address
        16      4       layoutID
        20      4       identifier
        24      2       par
        26      2       available commands
        28      1       serial timings format
        29      1       PeekPoke version of implementation (currently 2)
       (30+     0       reserved)

The information returned by this command is constant for the given instance.

layoutID is a four byte value that uniquely identifies the build of PeekPoke.
It is used to ensure that payloadExec code was compiled using the correct
symbol information.

identifier is a four byte constant that may be assigned any value by the user.
It can be used to identify the project, for example.
 
The available commands bitfield has bits set corresponding to the command
codes. For example, if bit 2 is set then writeHub is available. Bits 9 to 14
must always be set to 0 by devices implementing this version of PeekPoke. Bit
15 indicates whether the device has break detection enabled.

The serial timings format field identifies the format of the getSerialTimings
and setSerialTimings payloads used and expected by the implementation.

Future versions of the protocol may add more information to this response. Any
added information will have constant values for the given instance, and will
follow the fields already defined.


readHub
=======

Command payload, 8 bytes:
        pos     len     description
        0       4       initial header
        4       2       address of read start, any alignment
        6       2       count = number of bytes to read, may be zero

Response payload, 4+count bytes:
        pos     len     description
        0       4       initial header
        4+      count   the bytes read

Reads may not wrap around the end of hub RAM. The requested read must be
entirely within the allowed range or it will not be performed.


writeHub
========

Command payload, 8 bytes:
        pos     len     description
        0       4       initial header
        4       2       address of write start, any alignment
        6       2       count = number of bytes to write, may be zero
        8+      count   the bytes to write

Response payload, 4 bytes:
        pos     len     description
        0       4       initial header

Writes may not wrap around the end of hub RAM. The requested write must be
entirely within the allowed range or it will not be performed.

A single write command can be considered atomic since the data is included in
a packet that is fully received into a buffer and checked for errors before
performing the command.


readHubStr
==========

Command payload, 8 bytes:
        pos     len     description
        0       4       initial header
        4       2       address of read start, any alignment
        6       2       max count M, including terminating NUL, may be zero

Response payload, 4 to 4+count bytes:
        pos     len     description
        0       4       initial header
        4+      <= M    the string, including terminating NUL (if found)

readHubStr is like readHub, except it stops after the first 0x00 is found.

Reads may not wrap around the end of hub RAM. The requested read must be
entirely within the allowed range or it will not be performed.


getSerialTimings
================

Command payload, 4 bytes:
        pos     len     description
        0       4       initial header

Response payload, 5+ bytes:
        pos     len     description
        0       4       initial header
        4       1       format
        5+      -       varies

The format field allows for implementation changes.

Format 0 response payload, 36 bytes:
        pos     len     description
        ...     ...     ...
        5       3       padding, undefined values
        8       4       bitPeriod0
        12      4       bitPeriod1
        16      4       startBitWait
        20      4       stopBitDuration
        24      4       interbyteTimeout
        28      4       recoveryTime
        32      4       breakMultiple

All timings are in system clocks except breakMultiple, which is the number of
recoveryTime intervals that the rx line must be continuously low before a break
condition is detected.


setSerialTimings
================

Command payload, 5+ bytes:
        pos     len     description
        0       4       initial header
        4       1       format
        5+      -       varies

Format 0 command payload, 36 bytes:
        pos     len     description
        ...     ...     ...
        5       3       padding, undefined values
        8       4       bitPeriod0
        12      4       bitPeriod1
        16      4       startBitWait
        20      4       stopBitDuration
        24      4       interbyteTimeout
        28      4       recoveryTime
        32      4       breakMultiple

Response payload, 4 bytes:
        pos     len     description
        0       4       initial header

Changes take effect after the acknowledgement response is sent.


getToken
========

Command payload, 4 bytes:
        pos     len     description
        0       4       initial header

Response payload, 8 bytes:
        pos     len     description
        0       4       initial header
        4       4       token

token is a 4-byte value that is all zeroes on launch. It does not change
except when setToken is called.


setToken
========

Command payload, 8 bytes:
        pos     len     description
        0       4       initial header
        4       4       new token

Response payload, 8 bytes:
        pos     len     description
        0       4       initial header
        4       4       old token


payloadExec
===========

Command payload, 12+ bytes:
        pos     len     description
        0       4       initial header
        4       4       layoutID
        8+      4+      PASM code

Response payload, 4+ bytes (if sent):
        pos     len     description
        0       4       initial header
        4+      -       data

The payloadExec option requires a pre-arranged cog layout in order to work.
The layoutID argument identifies what layout the payload code expects. Only if
the payload's expected layout matches the implementation's will the payload
code be executed.

Execution starts at the beginning of the PASM code.

If a response is returned it must begin with the standard initial header.


